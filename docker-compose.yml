
networks:
    dev-net:

services:
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "8088:80"
        volumes:
            - ./:/var/www/html
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - php
            - mysql
        networks:
            - dev-net

    mysql:
        image: mysql:8.0
        container_name: mysql
        restart: unless-stopped
        tty: true
        ports:
            - "3306:3306"
        volumes:
            - ./mysql:/var/lib/mysql
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_USER: ${DB_USERNAME}
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
        networks:
            - dev-net

    php:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: php
        volumes:
            - ./:/var/www/html
            - ./storage/app/public:/var/www/html/public/storage
            - ./opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
        ports:
            - "9000:9000"
        networks:
            - dev-net
    composer:
        image: composer:latest
        container_name: composer
        volumes:
            - ./:/var/www/html
        working_dir: /var/www/html
        networks:
            - dev-net
    npm:
        image: node:22-alpine
        container_name: npm
        volumes:
            - ./:/var/www/html
        working_dir: /var/www/html
        entrypoint: ['npm']
        ports:
            - "5173:5173"
        networks:
            - dev-net
    artisan:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: artisan
        volumes:
            - ./:/var/www/html
        depends_on:
            - mysql
        working_dir: /var/www/html
        entrypoint: ['/var/www/html/artisan']
        networks:
            - dev-net
    redis:
        image: redis:alpine
        container_name: redis
        networks:
            - dev-net
        ports:
            - "6379:6379"
        command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]

    meilisearch:
        image: getmeili/meilisearch:latest
        container_name: meilisearch
        ports:
            - "7700:7700"
        environment:
            MEILI_MASTER_KEY: ${MEILISEARCH_KEY} # Opcjonalne: ustawienie klucza master
        networks:
            - dev-net
        volumes:
            - meili_data:/data.ms
volumes:
    meili_data:
